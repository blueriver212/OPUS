Looking through the matlab files, creating a flow chart of what is actually needed. 

Once the economic parameters have been set, the model wil then turn to MOCAT

It will go througheahc of the files that it has created to make a x0 file. 
    Here x0 is a matrix of one column matrix. 

Then it builds the cost function, this is the pysical and economic parameters. 
This is relatively straight forward and essentially are just values to be used later on. Would be good to check the numbers are the same. 

Then there is an integration over the timesteps with MOCAT. 

They then estimate the initial period launch rate, which is the 1/5 * number of satellites. 

So now it comes down to constellations
    In the default, there are 2 constellations (oneweb and starlink). These are treated separately to the fringe 'satellites'
        Interesting future point here, why should they not be included in the economic moidelling? If they are not. 

What's weird, is that is seems to scale the IAM - then do nothing with it? Ah maybe, because Si is always the same. 
So it just updating different parts of the iam. 

I think IAM is the same as FLM_steps in MOCAT. 

So IAM will start for the intiial population, of unslotted satellites (fringe, this should be forced by the user)
    It will have the first column for the initial population
    Then the second will have the next best guess

Once passed to the IAMSolver, you need to give:
    - launch rate input, which is the initial guess 
        It seems to be 0.05 times what is already there? Then by a launch mask, which is 1 or 0. 
    - launch mask, stops fringe satellties going to the same orbital altitude as the existing constellations
    - high level variables
    - linear
    - economics parameters
    - lam(:,1)
    - n workers

omIt then creates a function to parallise called excessReturnsCalculator
    - sets up the collision probability and the propagator
    - creates the lam with the constellation_launches and the other lauches (not sure what the differences are here)
    - it then seems first propagate the new positions of all of the positions using a forked version of the MOCAT-model
        - here it is likely that we will need to add some more functions to pyssem
    - then for each shell it calculates the collision probability. 

    - finally it looks at the fringeRateOfReturn
        - this is a pretty simple economic model, that can be made on the fly. Mainly uses economicParameters

    - then finally the excess_returns is equal to the 
        100*(rate_of_return - collision_probability*(1+ econ_params.tax))

There should be a check to ensure that the user has atleast 1S, 1Su and then 1N.


Some changes are going to be required to pyssem - and i will look into doing this now. 

